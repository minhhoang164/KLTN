import cv2
import numpy as np
import matplotlib.pyplot as plt
from paddleocr import PaddleOCR

# üîπ H√†m t·ª± ƒë·ªông xoay ·∫£nh
def auto_rotate_image(image_path):
    image = cv2.imread(image_path)
    if image is None:
        print("‚ùå Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh! Ki·ªÉm tra ƒë∆∞·ªùng d·∫´n.")
        return None, None
    
    # Ph√°t hi·ªán ch·ªØ b·∫±ng PaddleOCR
    paddle_ocr = PaddleOCR(use_angle_cls=True, lang="vi", det_db_box_thresh=0.5)
    result = paddle_ocr.ocr(image_path, cls=True)

    # T√≠nh to√°n g√≥c xoay trung b√¨nh
    angles = []
    for line in result:
        for word in line:
            points = np.array(word[0], dtype=np.float32)
            x1, y1 = points[0]  # G√≥c tr√™n tr√°i
            x2, y2 = points[1]  # G√≥c tr√™n ph·∫£i
            angle = np.arctan2(y2 - y1, x2 - x1) * 180 / np.pi
            angles.append(angle)

    if angles:
        avg_angle = np.mean(angles)
        print(f"üìê G√≥c xoay trung b√¨nh: {avg_angle:.2f}¬∞")
    else:
        print("‚ùå Kh√¥ng t√¨m th·∫•y ch·ªØ ƒë·ªÉ t√≠nh g√≥c xoay.")
        return image, image

    # Xoay ·∫£nh theo g√≥c trung b√¨nh
    (h, w) = image.shape[:2]
    center = (w // 2, h // 2)
    rotation_matrix = cv2.getRotationMatrix2D(center, avg_angle, 1.0)
    rotated_image = cv2.warpAffine(image, rotation_matrix, (w, h), flags=cv2.INTER_LINEAR, borderMode=cv2.BORDER_REPLICATE)

    return image, rotated_image

# üîπ H√†m ph√°t hi·ªán v√πng ch·ªØ v√† t·∫°o ·∫£nh nh·ªã ph√¢n
def detect_text_regions_and_mask_text_only(image):
    """
    Tr·∫£ v·ªÅ ·∫£nh ƒë√£ ƒë∆∞·ª£c l√†m t·ªëi ph·∫ßn kh√¥ng c√≥ ch·ªØ, ch·ªâ gi·ªØ l·∫°i v√πng ch·ªØ.
    """
    # L√†m n√©t ·∫£nh
    sharpen_kernel = np.array([[0, -1, 0], 
                               [-1, 5, -1], 
                               [0, -1, 0]])
    sharpened = cv2.filter2D(image, -1, sharpen_kernel)

    # PaddleOCR nh·∫≠n di·ªán ch·ªØ
    paddle_ocr = PaddleOCR(use_angle_cls=True, lang="vi", det_db_box_thresh=0.3)
    result = paddle_ocr.ocr(sharpened, cls=True)

    # T·∫°o ·∫£nh mask nh·ªã ph√¢n
    mask = np.zeros(image.shape[:2], dtype=np.uint8)

    for line in result:
        for word in line:
            points = np.array(word[0], dtype=np.int32)
            cv2.fillPoly(mask, [points], 255)

    # √Åp mask l√™n ·∫£nh g·ªëc: t√¥ ƒëen nh·ªØng v√πng kh√¥ng c√≥ ch·ªØ
    text_only_image = cv2.bitwise_and(image, image, mask=mask)

    return text_only_image, mask

# üîπ Ch·∫°y ch∆∞∆°ng tr√¨nh ch√≠nh
if __name__ == "__main__":
    image_path = r"E:\HocTap\KLTN\bien_hieu10.png"

    original, rotated = auto_rotate_image(image_path)

    if rotated is not None:
        text_only_image, mask = detect_text_regions_and_mask_text_only(rotated)

        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        plt.figure(figsize=(18, 6))

        plt.subplot(1, 3, 1)
        plt.imshow(cv2.cvtColor(original, cv2.COLOR_BGR2RGB))
        plt.title("·∫¢nh g·ªëc")
        plt.axis("off")

        plt.subplot(1, 3, 2)
        plt.imshow(cv2.cvtColor(rotated, cv2.COLOR_BGR2RGB))
        plt.title("·∫¢nh ƒë√£ xoay")
        plt.axis("off")

        plt.subplot(1, 3, 3)
        plt.imshow(cv2.cvtColor(text_only_image, cv2.COLOR_BGR2RGB))
        plt.title("Ch·ªâ v√πng ch·ªØ (ph·∫ßn kh√°c b·ªã ƒëen)")
        plt.axis("off")

        plt.tight_layout()
        plt.show()
